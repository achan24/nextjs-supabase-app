# Critical Development Tips

## When Asked to Copy Code "Exactly"

### The Problem
When asked to copy code "exactly like X", there's a tendency to:
1. Think we understand the "essence" of what needs to be copied
2. Use what seems like equivalent alternatives (e.g., different client libraries that serve similar purposes)
3. Miss crucial implementation details that make the original code work

### Real Example: Supabase Client Issue
- Original working code in ProcessFlowEditor used:
  ```typescript
  import { createBrowserClient } from '@supabase/ssr'
  const supabase = createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
  ```

- What we incorrectly used instead:
  ```typescript
  import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
  const supabase = createClientComponentClient()
  ```

- Result: Cookie parsing errors and authentication issues

### The Lesson
1. When asked to copy something EXACTLY, do exactly that:
   - Use the same imports
   - Use the same function calls
   - Use the same client libraries
   - Use the same implementation details
   
2. Don't assume different approaches are equivalent:
   - Different client libraries may handle auth differently
   - Different implementations may have different cookie handling
   - Small differences can cause major issues

3. If something works in one place and not another:
   - First step should be to make them IDENTICAL
   - Only deviate from the working implementation after it's working

### Remember
"Exactly" means EXACTLY. Not "similarly", not "equivalently", not "essentially the same".
If it works somewhere else in the codebase, copy it character by character first, then understand why it works later. 

IMPORTANT FUNCTIONALITY - DO NOT REMOVE

ProcessFlow Node Creation:
------------------------
1. The ProcessFlow editor MUST support both desktop AND mobile node creation:
   - Desktop: Drag and drop from NodeToolbox
   - Mobile: Direct click/tap on node types in NodeToolbox

2. Critical Implementation Details:
   - NodeToolbox components must have BOTH:
     a) onDragStart handlers (for desktop drag-drop)
     b) onClick handlers (for mobile tap-to-create)
   
3. Node Creation Logic:
   - Uses viewport-aware positioning via getViewport()
   - Calculates center position correctly:
     centerX = (-x + window.innerWidth / 2) / zoom
     centerY = (-y + window.innerHeight / 2) / zoom

4. Why This Matters:
   - Mobile users cannot drag-and-drop
   - Click/tap support is essential for mobile accessibility
   - Previous removals of this feature broke mobile functionality

DO NOT REMOVE OR MODIFY THIS DUAL FUNCTIONALITY WITHOUT EXPLICIT APPROVAL.
Keep both drag-and-drop AND click-to-create handlers in NodeToolbox components. 

## Supabase Client Usage in Next.js

### Client Component Setup
When working with Supabase in client components:
1. ALWAYS use the shared client from `@/lib/supabase` by importing `createClient`
2. DO NOT use `createClientComponentClient` from `@supabase/auth-helpers-nextjs`
3. DO NOT create new instances of `createBrowserClient` directly

```typescript
// ✅ CORRECT WAY
import { createClient } from '@/lib/supabase';

export default function MyComponent() {
  const supabase = createClient();
  // ... rest of component
}

// ❌ WRONG WAY - Don't use createClientComponentClient
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

// ❌ WRONG WAY - Don't create browser client directly
import { createBrowserClient } from '@supabase/ssr';
```

### Server Component Setup
For server components, use `createServerClient` from `@supabase/ssr`:

```typescript
import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';

export default async function ServerComponent() {
  const cookieStore = cookies();
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
      },
    }
  );
  // ... rest of component
}
```

### Common Patterns
1. Server components handle auth and pass user to client components
2. Client components use the shared client for data operations
3. Always filter data by user_id when querying
4. Use RLS policies to enforce data access at the database level

### Troubleshooting
If you're seeing auth issues or empty data:
1. Check you're using the correct client setup
2. Verify user_id is being used in queries
3. Confirm RLS policies are set up correctly
4. Check the browser console for auth-related errors 

KISS (Keep It Simple, Stupid) Principles:

1. Node Linking: When linking to nodes in the process flow, just use the node ID directly in the URL query parameter.
   - DO: `/dashboard/flows?nodeId=${nodeId}`
   - DON'T: Try to track or pass around additional IDs (flowId, etc.) when the node ID is sufficient
   - WHY: The node ID is unique and the system can find the right flow from just the node ID. Adding extra parameters adds complexity without benefit.

Remember: If you find yourself adding extra fields/parameters to track relationships that already exist in the database, stop and think if you're overcomplicating things. 

# Node Linking System - Issues & Prevention Tips

## Issues Encountered

1. Data Structure Mismatch
   - Problem: Mismatch between database structure (nodes stored in JSONB array) and frontend expectations
   - Impact: Links saved but not displayed in UI
   - Root Cause: Foreign key relationships in Supabase return arrays for one-to-many relationships

2. Type Definition Issues
   - Problem: TypeScript interfaces didn't match actual data structure from database
   - Impact: Runtime errors and incorrect data transformation
   - Root Cause: Not accounting for Supabase's data return format

3. Data Transformation Gaps
   - Problem: Missing proper transformation of database response to UI-ready format
   - Impact: Node data not properly extracted from flow's JSONB array
   - Root Cause: Incomplete understanding of data flow from DB to UI

## Prevention Strategies

1. Database Schema Design
   - Document foreign key relationship return formats
   - Add comments in migrations explaining data structures
   - Use database constraints to enforce data integrity
   - Consider adding database views for complex data structures

2. Type Safety
   - Create separate interfaces for DB responses vs UI models
   - Use discriminated unions for different data states
   - Add runtime type checks for critical data transformations
   - Document type transformation requirements

3. Data Flow
   - Implement proper data transformation layers
   - Add logging for development environments
   - Create data validation utilities
   - Write integration tests for data flow

4. Development Process
   - Create end-to-end tests for critical features
   - Add monitoring for runtime errors
   - Document expected data structures
   - Review database query results during development

5. Code Organization
   - Separate data transformation logic
   - Create utility functions for common transformations
   - Add type guards for runtime checks
   - Document complex data relationships

## Best Practices

1. Database
   - Always test foreign key relationship return formats
   - Document JSONB structure requirements
   - Add appropriate indexes for performance
   - Use database constraints for data integrity

2. TypeScript
   - Create separate types for raw DB data
   - Use type guards for runtime safety
   - Document type transformations
   - Add proper error handling

3. Testing
   - Add unit tests for transformations
   - Create integration tests for data flow
   - Test edge cases and error conditions
   - Validate data at each layer

4. Documentation
   - Document data structures
   - Add comments for complex transformations
   - Create examples of expected data formats
   - Maintain up-to-date API documentation

## Quick Reference

```typescript
// DB Response Type
interface DBResponse {
  flow: ProcessFlowWithNodes[];  // Note: Array from foreign key
}

// UI Model Type
interface UIModel {
  flow: {
    id: string;
    title: string;
  }
}

// Type Guard Example
function isValidFlowData(data: unknown): data is ProcessFlowWithNodes {
  return (
    typeof data === 'object' &&
    data !== null &&
    'nodes' in data &&
    Array.isArray((data as any).nodes)
  );
}

// Data Transformation Example
function transformDBToUI(dbData: DBResponse): UIModel {
  const flowData = Array.isArray(dbData.flow) ? dbData.flow[0] : dbData.flow;
  if (!isValidFlowData(flowData)) {
    throw new Error('Invalid flow data structure');
  }
  return {
    flow: {
      id: flowData.id,
      title: flowData.title
    }
  };
}
```

SEQUENCE TIMING TIPS
------------------

1. Timer Source of Truth
   - ALWAYS use timeSpent from ActiveSequenceContext as the source of truth
   - NEVER try to calculate elapsed time manually using startTime
   - NEVER use lastTimeSpent or historical values for current task timing

2. Task Completion Recording
   - When completing a task, use the CURRENT timeSpent value
   - Do NOT use task.data.lastTimeSpent for the current task
   - Only use completionHistory for PREVIOUSLY completed tasks

3. Sequence Completion
   - For the current task: use timeSpent
   - For previous tasks: use their latest completionHistory entry
   - Calculate total time by summing all task times
   - Reset timeSpent to 0 only AFTER saving completion

4. Common Pitfalls
   - Using startTime to calculate elapsed time (use timeSpent instead)
   - Using lastTimeSpent for current task (use timeSpent instead)
   - Using stale completion history for current task
   - Resetting timer before saving completion

5. Testing Timing Changes
   - Always test with multiple tasks
   - Verify times in completion summary
   - Check task history after completion
   - Test pause/resume functionality
   - Verify sequence history shows correct times

6. Debugging Timing Issues
   - Check ActiveSequenceContext timeSpent
   - Verify task completion records
   - Look for manual time calculations
   - Ensure timer reset happens after saving

Remember: timeSpent from ActiveSequenceContext is ALWAYS the source of truth for the current task!

## Handling User Authentication in Database Operations

### Common 401 Error Pattern
One of the most frequent issues in the app is getting 401 (Unauthorized) errors when inserting/updating data, even when the user appears to be logged in. This typically happens because:

1. The table has RLS (Row Level Security) enabled
2. The table requires a user_id field
3. The RLS policy checks if auth.uid() matches user_id
4. The insert/update operation doesn't include the user_id

### Solution Pattern
When working with tables that have user-based RLS:

```typescript
// ✅ CORRECT WAY - Always include user_id
const addItem = async (data: ItemData) => {
  // 1. Get current session
  const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
  if (sessionError) throw sessionError;
  if (!sessionData.session?.user?.id) throw new Error('No authenticated user');

  // 2. Include user_id in the operation
  const { data: result, error } = await supabase
    .from('your_table')
    .insert({ ...data, user_id: sessionData.session.user.id })
    .select()
    .single();

  if (error) throw error;
  return result;
};

// ❌ WRONG WAY - Missing user_id
const addItem = async (data: ItemData) => {
  const { data: result, error } = await supabase
    .from('your_table')
    .insert(data)  // Missing user_id will cause 401
    .select()
    .single();

  if (error) throw error;
  return result;
};
```

### Checklist for New Tables/Features
When adding new tables or features that require user data:

1. Database Setup:
   - Add user_id column (uuid references auth.users(id))
   - Enable RLS on the table
   - Create RLS policies that check auth.uid()
   - Add NOT NULL constraint on user_id
   - Add foreign key with ON DELETE CASCADE

2. Insert Operations:
   - Always get current session first
   - Verify user is authenticated
   - Include user_id in the insert
   - Handle potential auth errors

3. Update/Delete Operations:
   - RLS policies will handle auth check
   - No need to include user_id in where clause
   - Still handle potential auth errors

### Remember
- 401 errors usually mean you forgot to include user_id
- Always check RLS policies when adding new tables
- Get user session before database operations
- Include user_id in ALL insert operations
- Test with both authenticated and unauthenticated states

## Handling Supabase RLS Policy Migrations

### Common Issues with Policy Migrations
When working with Supabase RLS policies in migrations:

1. Policy Already Exists Error (42710)
   - This happens when trying to create a policy that already exists
   - Solution: Always drop existing policies first using `drop policy if exists`
   - Example:
   ```sql
   -- Drop first
   drop policy if exists "Policy name" on table_name;
   
   -- Then create
   create policy "Policy name" on table_name ...
   ```

2. Best Practices for Policy Migrations
   - Create separate migrations for policy changes
   - Always use `if exists` when dropping
   - Keep policies organized by table
   - Document policy relationships in comments
   - Test policy changes in development first
