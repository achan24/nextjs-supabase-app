My initial prompt:  I'm creating a kind of character avatar page where I can see the stats of my character, but it's part of a larger app called guardian angel which has tasks built in, areas>subareas>goals and metrics, and sequences which are a number of tasks arranged sequentially.
So I kind of want to map these tasks and goals and stuff to my virtual avatar.  I could use tags to tag certain tasks or goals, etc to contribute to certain skills or character values, eg. discipline, strength, perseverance, etc.  
Think of the sims, my character is a virtual representation of me, except in sims where you just spend time skilling up cooking for example, there would be corresponding goals or maybe there should be a separate skills category where I focus specifically on building skills, that could be separate from goals.  Because thinking about it goals are emphemeral, once they are completed they are done, so to speak, but skills - you can always improve skills, so I like the idea of skills building rather than goals, you can swap your goals, etc but you always want certain skills, like social skills, maybe cooking skills, maybe life management skills, skills are what differentiate us and ability to execute.  That's what learning is.  That's the point of this app.



Awesome. Let's break this down into a clear MVP spec so you can build this character dashboard inside your Guardian Angel app.

🧍‍♂️ CHARACTER PAGE — SPECIFICATION

🔹 1. GOAL
To create a dynamic, gamified profile page that:

Shows your daily progress across core life areas
Visually reflects how well you're doing
Motivates habit-building and long-term progression
🔹 2. CORE COMPONENTS
🧠 A. Avatar State Logic

Predefined avatar states based on overall bar fill %
Visual layers tied to area states (e.g., messy room for low environment)
Avatar expression + background reflect status:
80–100%: 🟢 Clean, confident, bright
50–79%: 🟡 Neutral, okay
<50%: 🔴 Messy, tired, dim
📊 B. Progress Bars (Daily Fill)

Each area has a target and a current progress:

Area	Daily Target (pts)	Source
Work & Learning	5 pts	Tagged tasks/sequences
Health & Fitness	3 pts	Exercise, movement logs
Relationships	1–2 pts	Messages, calls, hangs
Environment & Hygiene	2 pts	Cleaning, grooming logs
Mind & Spirit (opt)	1 pt	Meditation, journaling
Bar = (points completed / daily target) * 100%

🕓 C. Streaks & Momentum

Show current streak days
Progression meter: track area level-ups based on consistent success
📝 D. Daily Task Log Feed (optional)

Show last 5–10 completed tasks with timestamps


🔹 5. SCALING + PROGRESSION SYSTEM
Daily quota grows over time if you consistently hit targets
You can optionally manually increase difficulty
Later: add XP gain per area, skill levels, and passive buffs


🔹 6. ASSET SYSTEM (for Avatar)
Use:

SVG layers (hair, background, expression, clothing, cleanliness, etc.)
Or just switch between static pre-rendered images for now
Logic can be like:

if (hygiene < 50) show 'greasy hair'
if (environment < 50) show 'messy background'
if (overallScore > 80) show 'smiling expression'




You're not just making a task manager — you're building a life simulation game starring you.
Let's break this down into systems to help you build it piece by piece, starting with a daily structure, visual feedback, and progression model.

🎮 THE CORE LOOP: "LIVE A GOOD DAY"

Every day is a level. To beat it, you must:

Complete core tasks across all areas
Fill your life bars (Hygiene, Fitness, Work, etc.)
See your avatar reflect how you're doing
Progress to harder/more meaningful days over time
✅ DAILY STRUCTURE — "The Checklist of Life"

🎯 Step 1: Daily Requirements System
Each day has a required quota per area:

Area	Required Today
Hygiene	🧼 Shower + brush teeth (2 pts)
Health & Fitness	🏃 30m movement or workout (3 pts)
Work & Learning	💻 1–2 hours of deep work (5 pts)
Relationships	📞 1 meaningful interaction (1 pt)
Environment	🧹 Tidy + 1 chore (2 pts)
Mind/Spirit (optional)	🧘 Meditate or journal (1 pt)
You can start small and scale over time.

📈 SCALING DIFFICULTY OVER TIME

Track your success over a rolling 7-day window.

If you meet daily targets consistently → level up that area
Then you increase that area's daily quota slightly
If you fail too often → the area "decays" a bit
This builds a progressive life engine:

You don't start with 10 tasks/day
But 3 weeks from now, you might handle 15 with ease
🧍 AVATAR REFLECTION SYSTEM

🌞 If you're doing well:
Avatar looks clean, sharp, confident
Background is tidy, sunny, well-kept
😵 If you slack:
Hair messy, dark circles under eyes
Clothes wrinkled, room gets cluttered
Eventually: sitting on couch looking lifeless
🎨 Implementation
Avatar states can be pre-rendered images or SVG layer combos
Every area has a "clean" and "dirty" state:
Hygiene: shiny vs. greasy
Environment: tidy room vs. clutter
Fitness: upright posture vs. slouched
You can blend these together to form unique states (just like Sims or Tamagotchi).

📊 VISUAL SYSTEM

Component	Details
Life Bars	Daily area quotas (fill % shown with color or animation)
Avatar Renderer	Switches images based on area fill % thresholds
Progress Tracker	Weekly level-up tracker
Penalty Tracker	Decay effects if <40% over 3 days
Streak Meter	Visual badge or aura around avatar (e.g., glowing if on fire 🔥)


👇 Example User Flow

Morning: Avatar looks tired, house slightly messy.
User completes:
Shower 🧼 (hygiene +1)
Cleans desk 🧹 (environment +1)
Starts work (work +2)
Bars fill → avatar animates: brighter eyes, clothes freshen
By evening:
If all bars full → avatar fully restored, maybe with glow or badge
If only some → mixed appearance (fresh, but messy room)

# Character Attribute Definitions

# NEW FEATURE: Daily Target Completion UI (2024-06-18)

🎯 GOAL
To reduce visual clutter and increase focus by hiding completed areas/subareas/goals for the current day.

📋 REQUIREMENTS

1. Completion Criteria
   - An area is considered "complete" when its daily_points >= daily_target
   - A subarea is considered "complete" when its daily_points >= daily_target
   - A goal is considered "complete" when its daily_points >= daily_target

2. UI Behavior
   - When an area/subarea/goal reaches its daily target:
     - The item smoothly fades out (animation)
     - A small "completed" indicator appears briefly before fade
     - The item is hidden from the main view
   
3. Access to Hidden Items
   - Add a "Show Completed" toggle button at the top of the list
   - When toggled ON:
     - Show all items, with completed ones having a visual distinction (e.g., checkmark, opacity)
     - Keep the completed items at the bottom of the list
   - When toggled OFF:
     - Hide completed items
     - Show only items still needing work

4. Persistence
   - The hidden state resets at midnight (when daily points reset)
   - The user's toggle preference (show/hide completed) should persist across sessions

5. Edge Cases
   - If a completed item's points are reduced below target:
     - Item should smoothly fade back in
     - Item should return to its original position in the list
   - Parent items (areas/subareas) should remain visible if they have incomplete children
   - Empty state: Show encouraging message when all items are complete

6. Technical Considerations
   - Use CSS transitions for smooth animations
   - Store toggle state in localStorage
   - Update points calculations to trigger visibility changes
   - Maintain proper spacing/layout when items are hidden

7. Accessibility
   - Toggle button should be keyboard accessible
   - Screen readers should announce when items are completed
   - Hidden items should still be in the DOM but visually hidden

This feature aims to help users focus on remaining tasks while maintaining access to completed items when needed.

**Discipline**: Doing tasks you've done before. Sticking to routines, habits, or familiar actions.

**Courage**: Doing tasks you've never done before. Attempting something new or unknown, where you don't know how you'll perform.

**Bravery**: Doing things you know you suck at, but do them anyway. Facing tasks you've tried and struggled with, or know are difficult for you, and still taking action.

**Creativity**: Thinking of new tasks that work—i.e., are effective. Coming up with novel solutions or approaches that prove to be successful in practice.

# Secondary Character Traits

**Resilience**: Bouncing back after setbacks, failures, or tough days.
- *Example:* Try again after failing an exam or missing a workout. If you log a task you previously failed or missed and complete it, you earn resilience.

**Adaptability**: Adjusting quickly to new situations, changes, or unexpected challenges.
- *Example:* Switch to a new study method when the old one isn't working. If you change your approach or routine in response to feedback or a new challenge, you earn adaptability.

**Initiative**: Taking action without being told. Starting new projects or tasks on your own.
- *Example:* Start a new project or habit without a prompt. If you create and complete a task that wasn't scheduled or suggested, you earn initiative.

**Perseverance**: Sticking with long-term goals or difficult tasks, even when progress is slow.
- *Example:* Work on a project for 30+ days in a row. If you log progress on a long-term or multi-step task over many days, you earn perseverance.

**Self-Awareness**: Recognizing your own emotions, strengths, weaknesses, and patterns of behavior.
- *Example:* Reflect on what went well and what didn't in a daily journal. Completing a self-reflection or feedback task earns self-awareness.

**Empathy**: Understanding and caring about the feelings and perspectives of others.
- *Example:* Help a friend with their problem or listen to someone's concerns. Logging a task that involves supporting or understanding others earns empathy.

**Patience**: Waiting calmly for results, progress, or for others, without frustration.
- *Example:* Wait for feedback on a project before making changes. Logging a task that involves waiting or delayed gratification earns patience.

**Accountability**: Taking responsibility for your actions, decisions, and their outcomes.
- *Example:* Admit a mistake and make a plan to fix it. Logging a task where you own up to an error or follow up on a commitment earns accountability.

**Resourcefulness**: Finding clever ways to overcome obstacles or make the most of what you have.
- *Example:* Solve a problem with limited resources. Logging a task that required improvisation or creative use of available tools earns resourcefulness.

**Curiosity**: Eagerly seeking new knowledge, experiences, or skills.
- *Example:* Take an online course in a new subject. Logging a task that involves learning something new or exploring a new topic earns curiosity.

# Primary Trait Tagging Rules

**Discipline**
- **Tags:** routine, habit, repeat, maintenance, scheduled
- **Rule:** Task has been completed before (user has a history with this task or habit).
- **Examples:**
  - "Daily workout"
  - "Morning meditation"
  - "Weekly review"

**Courage**
- **Tags:** first-time, new, unknown, explore, try
- **Rule:** Task is new to the user (no prior completions, or marked as "first attempt").
- **Examples:**
  - "Try public speaking for the first time"
  - "Attend a new class"
  - "Apply for a job in a new field"

**Bravery**
- **Tags:** difficult, fear, challenge, struggle, weakness
- **Rule:** Task is known to be hard for the user (user has failed before, or self-reports low confidence/skill).
- **Examples:**
  - "Go to the gym after skipping for weeks"
  - "Have a difficult conversation you've been avoiding"
  - "Work on a subject you consistently struggle with"

**Creativity**
- **Tags:** invent, innovate, new-idea, solution, design, experiment
- **Rule:** Task involves coming up with a new idea, method, or solution that is effective.
- **Examples:**
  - "Design a new workflow that improves productivity"
  - "Write an original story or song"
  - "Find a new way to solve a recurring problem"

# Secondary Trait Tagging Rules

**Resilience**
- **Tags:** retry, bounce-back, recovery, persistence, comeback
- **Rule:** Task is a repeat attempt after a failure, missed day, or setback.
- **Example:**
  - "Retake a failed exam"
  - "Go for a run after missing a week"

**Adaptability**
- **Tags:** change, switch, adjust, flexible, pivot
- **Rule:** Task involves changing your approach, routine, or plan in response to new information or circumstances.
- **Example:**
  - "Switch to a new study method after poor results"
  - "Adapt your schedule due to unexpected events"

**Initiative**
- **Tags:** start, proactive, self-starter, launch, propose
- **Rule:** Task is self-initiated, not prompted by others or a schedule.
- **Example:**
  - "Start a new project on your own"
  - "Propose a new idea at work"

**Perseverance**
- **Tags:** long-term, grind, stick-with-it, ongoing, marathon
- **Rule:** Task is part of a long-term effort or repeated over many days/weeks.
- **Example:**
  - "Work on a thesis for 30 days straight"
  - "Practice an instrument daily for a month"

**Self-Awareness**
- **Tags:** reflect, journal, feedback, insight, review
- **Rule:** Task involves self-reflection, journaling, or seeking feedback.
- **Example:**
  - "Write a daily reflection"
  - "Ask for feedback on your performance"

**Empathy**
- **Tags:** help, support, listen, care, understand
- **Rule:** Task involves helping, listening to, or supporting others.
- **Example:**
  - "Listen to a friend's problem"
  - "Volunteer to help someone in need"

**Patience**
- **Tags:** wait, delay, endure, hold, persist
- **Rule:** Task requires waiting for results, progress, or others, or involves delayed gratification.
- **Example:**
  - "Wait for feedback before making changes"
  - "Stick with a slow process without frustration"

**Accountability**
- **Tags:** own-up, responsibility, follow-up, admit, correct
- **Rule:** Task involves admitting mistakes, taking responsibility, or following up on commitments.
- **Example:**
  - "Admit a mistake and make a plan to fix it"
  - "Check in on a promise you made"

**Resourcefulness**
- **Tags:** improvise, hack, workaround, optimize, make-do
- **Rule:** Task involves finding creative solutions or making the most of limited resources.
- **Example:**
  - "Solve a problem with what you have on hand"
  - "Find a workaround for a blocked task"

**Curiosity**
- **Tags:** learn, explore, discover, research, question
- **Rule:** Task involves learning something new, exploring, or asking questions.
- **Example:**
  - "Take a course in a new subject"
  - "Research a topic you're unfamiliar with"

---

**How to Use These Rules**
- **Automatic tagging:**
  - If a task is marked as "new" and has no prior completions → tag as courage.
  - If a task is marked as "routine" or has been completed multiple times → tag as discipline.
  - If a task is marked as "difficult" or user has failed before → tag as bravery.
  - If a task is marked as "new-idea" or "solution" and is effective → tag as creativity.
- **Manual tagging:**
  - Let users select tags when creating or completing a task.

---

# System Implementation & Conversation Summary (2024-06)

This section summarizes the design, logic, and implementation details discussed and refined during the development of the gamified character and goal-tracking system.

---

### 1. Weekly Targets System
- **Database:** Created a `character_weekly_targets` table, ensuring correct RLS policies and UUID usage.
- **Frontend:** Implemented loading and saving of weekly targets, fixed UUID mapping, and ensured error handling and type safety.
- **Bugs Fixed:** Addressed issues with saving/loading, UUID mismatches, and RLS errors. Added toast notifications for save success/failure.
- **UI/UX:** Added accessibility improvements, loading spinners, and error messages for authentication and state loading.

### 2. Authentication and Supabase Client
- Ensured the correct Supabase client (`@/lib/supabase`) is used throughout for consistent authentication and cookie management.
- Fixed issues with user ID retrieval and state loading.

### 3. Dialog Accessibility and Controlled Inputs
- Addressed warnings about missing `aria-describedby` in dialogs.
- Fixed controlled/uncontrolled input warnings by ensuring all input values are always defined.

### 4. Weekly/Daily Target Logic
- Clarified the distinction between "Today's Targets" (saving/loading only today's values) and "Weekly Schedule" (saving/loading all days).
- Updated logic so that saving from each tab only affects the intended days.
- Ensured that editing in either tab updates the correct part of the weekly targets array.

### 5. Data Propagation and State Sync
- Fixed issues where changes in the dialog were not reflected in the main "Daily Progress" UI.
- Added a new prop (`onUpdateAllTargets`) to propagate all weekly targets back to the parent, updating area, subarea, and goal targets for today.

### 6. Trait Definitions and Tagging System
- Defined primary traits: **Discipline** (routine tasks), **Courage** (new tasks), **Bravery** (tasks you know you struggle with), **Creativity** (new, effective tasks).
- Defined secondary traits: **Resilience, Adaptability, Initiative, Perseverance, Self-Awareness, Empathy, Patience, Accountability, Resourcefulness, Curiosity**.
- For each trait, provided:
  - A definition
  - Example tasks
  - Tagging/categorical rules (suggested tags, rules for automatic/manual tagging, and examples)
- Added all definitions and rules to this document.

### 7. XP and Stat System
- Outlined the flow: Completing a task/sequence attached to a goal contributes points to daily progress and awards XP.
- Tags on tasks boost character stats and can apply XP multipliers.
- **Multipliers:** Courage = x2 XP, Bravery = x3 XP (highest multiplier applies if both are present).
- Provided logic for how to apply these multipliers and how to increment stats based on tags.

### 8. User Clarifications and Philosophy
- User clarified nuanced distinctions between traits (e.g., discipline vs. courage vs. bravery).
- Discussed how to recognize and tag tasks for each trait, both automatically and manually.
- Emphasized the importance of accurate state propagation and correct UI reflection of saved data.

### 9. Outstanding Issues and Fixes
- Fixed issues with only area-level targets being saved/loaded; ensured subarea and goal targets are included.
- Ensured that saving from the correct tab (daily/weekly) only affects the intended days.
- Ensured that all relevant state is updated in the parent component after dialog actions.

---

**In summary:**
The system now supports nuanced trait tracking, correct data flow, and extensible tagging for both primary and secondary character attributes. The documentation and codebase reflect a full-stack approach: database schema, frontend state management, accessibility, error handling, trait definitions, tagging logic, XP/stat calculation, and extensibility for future features.

---

## Task/Sequence Completion Flow

1. **Complete a Task or Sequence**
   - The task/sequence is attached to a goal (and possibly to an area/subarea).

2. **Points Contribution**
   - The task's points contribute to the relevant daily progress target (area, subarea, or goal).
   - This helps fill the progress bar for that day.

3. **XP Award**
   - Completing the task/sequence gives you XP.
   - The amount of XP can be based on:
     - The base points of the task/sequence.
     - Any multipliers from tags (see below).

4. **Tag-Based Stat Boosts**
   - The tags on the task (e.g., `discipline`, `courage`, `creativity`, etc.) boost your character's corresponding stats.
   - For example:
     - Completing a "courage" task increases your Courage stat.
     - Completing a "discipline" task increases your Discipline stat.
     - Completing a "creativity" task increases your Creativity stat.
   - Secondary tags (e.g., `resilience`, `adaptability`) can boost those secondary stats.

5. **Daily Progress**
   - As you complete tasks, your daily progress bars fill up for each area.
   - When you hit your daily targets, you can get bonus XP or rewards.

---

## Example Flow

- You complete a task tagged as `courage`, `creativity`, and worth 2 points, attached to the "Work & Learning" goal.
- **Points:**  
  - 2 points are added to your "Work & Learning" daily progress.
- **XP:**  
  - You get base XP for the task (e.g., 2 XP), plus a bonus for the tags (e.g., +1 XP for each tag).
- **Stats:**  
  - Your Courage and Creativity stats each increase by 1.
- **Daily Progress:**  
  - If you reach your daily target for "Work & Learning", you get a daily bonus.

---

## How to Implement

- When a task/sequence is completed:
  1. Add its points to the relevant progress target(s).
  2. Award XP (base + tag bonuses).
  3. Increment the stats for each tag present.
  4. Check if daily targets are met for bonus XP.

---

---

# NEW FEATURE: Today's Tasks Dashboard (2024-12-19)

## 🎯 OVERVIEW
Add a "Today's Tasks" section to the Character dashboard that allows users to star/flag tasks they want to focus on today. This feature will appear prominently on the Character dashboard, positioned above the Skills section to emphasize daily action and progress.

## 📋 CORE REQUIREMENTS

### 1. Task Starring/Flagging System
**Primary Mechanism:** Star/flag tasks to add them to today's list
**Purpose:** Simple, intuitive way to curate daily focus

**Features:**
- **Star Button:** Add a star/flag icon to task cards throughout the app
- **Toggle Functionality:** Click to star/unstar tasks
- **Visual Feedback:** Clear indication of starred status
- **Persistent State:** Starred status persists across sessions
- **Today's Filter:** Only show tasks starred for today

### 2. Today's Tasks Display Component
**Location:** Character Dashboard, positioned above Skills section
**Purpose:** Show all starred tasks for today with completion tracking

**Features:**
- **Task List:** Display all starred tasks with:
  - Task title and description
  - Associated goal, subarea, and area hierarchy
  - Checkbox for completion
  - Points value for the task
- **Visual Hierarchy:** Clear organization by area or priority
- **Empty State:** Encouraging message when no tasks are starred for today
- **Quick Actions:** Unstar task, view details, edit task

### 3. Task Completion and Point Cascade
**Purpose:** When a task is completed, trigger the point cascade system

**Features:**
- **Checkbox Completion:** Click checkbox to mark task complete
- **Point Increment:** Add task points to the associated goal's daily_points
- **Cascade Effect:** Trigger the existing point cascade system:
  - Goal daily_points increase
  - Subarea daily_points increase (sum of all goals)
  - Area daily_points increase (sum of all subareas)
  - Daily progress bars update
  - Character XP and stats update based on traits
- **Visual Feedback:** Immediate UI updates showing point increases
- **Completion Animation:** Smooth transition when marking complete

### 4. Integration with Existing Systems
**Purpose:** Leverage existing goal and character systems

**Features:**
- **Goal Association:** Tasks must be associated with a goal to appear in today's list
- **Point System:** Use existing task points and goal point structures
- **Character Traits:** Apply existing trait tagging and XP systems
- **Progress Bars:** Update existing daily progress visualization
- **Database Consistency:** Maintain referential integrity with existing tables

## 🗄️ DATABASE REQUIREMENTS

### 1. Add Starred Field to Tasks Table
```sql
-- Add starred field to existing tasks table
ALTER TABLE tasks ADD COLUMN is_starred_for_today BOOLEAN DEFAULT FALSE;
ALTER TABLE tasks ADD COLUMN starred_at TIMESTAMPTZ;

-- Add index for efficient querying of starred tasks
CREATE INDEX idx_tasks_starred_today ON tasks(user_id, is_starred_for_today) 
WHERE is_starred_for_today = TRUE;
```

### 2. Manual Point Cascade (Frontend)
**Note:** Point cascade is handled manually on the Character progress screen, not through database functions or automatic triggers.

**Current System:**
- **Manual Point Entry:** Points are posted manually through the Character progress UI
- **Frontend Calculation:** The Character dashboard handles point cascading
- **No Automatic Triggers:** Database doesn't automatically cascade points

**Task Completion Flow:**
1. **Mark Task Complete:** Update task status to 'completed'
2. **Unstar Task:** Remove star from completed task
3. **Manual Point Entry:** User manually adds points through Character progress screen
4. **Frontend Cascade:** Character dashboard handles the point cascade logic
5. **Update Progress Bars:** UI reflects the manually entered points

**Implementation:**
```typescript
// In taskCompletionService.ts
async function completeTask(taskId: string, userId: string) {
  // 1. Get task details
  const task = await getTaskWithGoal(taskId, userId);
  
  // 2. Mark task as completed
  await updateTaskStatus(taskId, 'completed');
  
  // 3. Unstar the task
  await unstarTask(taskId);
  
  // 4. Show notification to user
  // "Task completed! Add points manually on Character screen"
  
  // 5. Optionally navigate to Character screen
  // router.push('/dashboard/character');
}
```

**User Experience:**
- Task completion is separate from point entry
- User manually manages points through existing Character progress interface
- Maintains current workflow where points are manually controlled

### 3. RLS Policies (if needed)
```sql
-- Ensure users can only star/unstar their own tasks
-- (existing task policies should cover this)
```

## 🎨 UI/UX REQUIREMENTS

### 1. Star Button on Task Cards
**Location:** Throughout the app wherever tasks are displayed
**Design:** Star icon (⭐) that toggles between filled and outlined states
**Behavior:** 
- Click to star/unstar a task for today
- Visual feedback with smooth transition
- Starred tasks show filled star, unstarred show outlined star

### 2. Today's Tasks Section Layout
```
┌─────────────────────────────────────┐
│ Today's Tasks                       │
│ [Show/Hide Completed] [Settings]    │
├─────────────────────────────────────┤
│ ☐ Complete project proposal         │
│   📝 Work & Learning > Development  │
│   🎯 Goal: Ship MVP • 2 pts         │
│                                     │
│ ☐ Morning workout                   │
│   💪 Health & Fitness > Exercise    │
│   🎯 Goal: Build Strength • 1 pt    │
│                                     │
│ ☑ Daily meditation                  │
│   ✅ Completed at 8:30 AM           │
│   🧘 Mind & Spirit > Wellness       │
│   🎯 Goal: Inner Peace • 1 pt       │
└─────────────────────────────────────┘
```

### 3. Task Completion Flow
**Checkbox Behavior:**
- Click checkbox to mark task complete
- Immediate visual feedback (checkmark appears)
- Points cascade animation shows in progress bars
- Task moves to completed section or disappears
- Star is automatically removed

### 4. Visual Design Elements
- **Star Icon:** Clear, accessible star button on all task cards
- **Hierarchy Display:** Show task > goal > subarea > area clearly
- **Points Display:** Show point value prominently
- **Completion Animation:** Smooth checkbox transition and point cascade
- **Empty State:** Encouraging message when no tasks are starred

## 🔄 USER FLOWS

### 1. Starring Tasks Flow
1. User browses tasks throughout the app (goals, projects, etc.)
2. Sees star icon (⭐) on each task card
3. Clicks star to add task to today's list
4. Star fills in and task appears in Today's Tasks section
5. Can unstar at any time to remove from today's list

### 2. Task Completion Flow
1. User opens Character dashboard
2. Sees starred tasks in Today's Tasks section
3. Clicks checkbox on a task to mark complete
4. System immediately:
   - Marks task as completed
   - Removes star from task
   - Shows notification: "Task completed! Add points manually on Character screen"
5. User manually adds points through existing Character progress interface
6. Character dashboard handles point cascade as usual

### 3. Daily Reset Flow
1. At midnight, all starred tasks are automatically unstarred
2. User starts fresh each day with new starred tasks
3. Previous day's completed tasks remain in history
4. Progress bars reset for new day

## 🔧 TECHNICAL IMPLEMENTATION

### 1. Frontend Components
- `TodayTasksSection.tsx` - Main container component for Today's Tasks
- `StarButton.tsx` - Reusable star button component for task cards
- `TodayTaskCard.tsx` - Individual task display with completion checkbox
- `TaskStarService.ts` - Service for starring/unstarring tasks

### 2. Backend Services
- `taskStarService.ts` - Handle starring/unstarring operations
- `taskCompletionService.ts` - Handle task completion and point cascade
- `todayTasksService.ts` - Fetch starred tasks for today

### 3. Database Functions
```sql
-- Get starred tasks for today
CREATE OR REPLACE FUNCTION get_starred_tasks_for_today(user_uuid UUID)
RETURNS TABLE (
  task_id UUID,
  title TEXT,
  description TEXT,
  points NUMERIC,
  goal_title TEXT,
  subarea_title TEXT,
  area_title TEXT,
  area_icon TEXT,
  starred_at TIMESTAMPTZ
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    t.id as task_id,
    t.title,
    t.description,
    t.points,
    lg.title as goal_title,
    lgs.title as subarea_title,
    lga.title as area_title,
    lga.icon as area_icon,
    t.starred_at
  FROM tasks t
  JOIN life_goals lg ON t.goal_id = lg.id
  JOIN life_goal_subareas lgs ON lg.subarea_id = lgs.id
  JOIN life_goal_areas lga ON lgs.area_id = lga.id
  WHERE t.user_id = user_uuid
  AND t.is_starred_for_today = TRUE
  AND DATE(t.starred_at) = CURRENT_DATE
  ORDER BY t.starred_at ASC;
END;
$$ LANGUAGE plpgsql;

-- Function to star/unstar a task
CREATE OR REPLACE FUNCTION toggle_task_star(
  task_uuid UUID,
  user_uuid UUID,
  star_it BOOLEAN
) RETURNS BOOLEAN AS $$
BEGIN
  UPDATE tasks 
  SET is_starred_for_today = star_it,
      starred_at = CASE WHEN star_it THEN NOW() ELSE NULL END,
      updated_at = NOW()
  WHERE id = task_uuid AND user_id = user_uuid;
  
  RETURN FOUND;
END;
$$ LANGUAGE plpgsql;


```

### 4. API Endpoints
```typescript
// Star/unstar a task
POST /api/tasks/[id]/star
DELETE /api/tasks/[id]/star

// Complete a task (triggers point cascade)
POST /api/tasks/[id]/complete

// Get today's starred tasks
GET /api/today-tasks
```

## 📊 ANALYTICS & INSIGHTS

### 1. Daily Completion Metrics
- Tasks completed vs. planned
- Time spent on different areas
- Completion rate by task type
- Streak tracking for daily planning

### 2. Pattern Recognition
- Most productive task types
- Optimal task ordering
- Time-of-day effectiveness
- Goal area balance

### 3. Smart Suggestions
- Suggest tasks based on goal gaps
- Recommend sequences based on time available
- Propose task combinations that work well together

## 🔮 FUTURE ENHANCEMENTS

### Phase 2 Features
- **Time Blocking:** Assign time slots to tasks
- **Energy Level Tracking:** Match tasks to energy levels
- **Context Switching:** Minimize context switches between tasks
- **Focus Mode:** Hide other dashboard sections during focused work

### Phase 3 Features
- **AI Task Suggestions:** ML-powered task recommendations
- **Social Sharing:** Share daily plans with accountability partners
- **Integration:** Connect with calendar, email, and other productivity tools
- **Gamification:** Daily challenges and achievement badges

## 🎯 SUCCESS METRICS

### Primary KPIs
- **Daily Task Completion Rate:** % of planned tasks completed
- **User Engagement:** Daily active users of Today's Tasks
- **Goal Progress:** Correlation between daily task completion and goal achievement
- **Character Progression:** XP and stat gains from daily task completion

### Secondary KPIs
- **Planning Frequency:** How often users plan their day
- **Task Carryover Rate:** % of tasks carried to next day
- **Area Balance:** Distribution of tasks across life areas
- **User Satisfaction:** Feedback on task planning experience

---

**Implementation Priority:**
1. **Database Migration:** Add starred fields to tasks table
2. **Star Button Component:** Create reusable star button for task cards
3. **Today's Tasks Section:** Display starred tasks on Character dashboard
4. **Task Completion:** Implement checkbox completion with point cascade
5. **Integration:** Connect with existing character and progress systems
6. **Polish:** Animations, empty states, and user experience refinements

This feature will transform the Character dashboard from a passive progress tracker into an active daily planning and execution tool, reinforcing the connection between daily actions and long-term character development.

---

# NEW FEATURE: Problem → Tree Widget (2024-12-19)

### How to shrink the "Problem → Tree" idea into a **small card inside the Character (Control-Centre) view**

Think of the card as a **dashboard widget**—a quick-glance status tile that routes the user to the full List/Tree page when they need depth.

---

#### 1. What the card should (and shouldn't) do

| KEEP                                                                                                                                                                                                                                                              | DROP (or link out)                                                                                                                                        |
| ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
| • Show the **current focus problem** (or the one with most open items).<br>• Display a **red/green status dot** that reflects whether *any* descendant is still open.<br>• Tiny "N open / M total" counter.<br>• "Add sub-problem / experiment" quick-action (+). | • Full tree rendering—that belongs in its own page or modal.<br>• Deep filtering / searching.<br>• Drag-and-drop re-parenting.<br>• Analytics dashboards. |

---

#### 2. Recommended card layout (≈ 240 × 180 px)

```
┌─────────────────────────────┐
│  🩺  Sleep Issues           │  ← title (truncated after 1 line)
│  • 2 open / 7 total         │
│                             │
│  ┌─Progress bar──────────┐  │
│  │■■■■□□□               │  │  ← solved vs. open
│  └───────────────────────┘  │
│                             │
│  ↓ Open tree   ＋ Add       │  ← two tiny buttons
└─────────────────────────────┘
```

*The colour of the title icon or left border flips red if any descendant is open.*

---

#### 3. Interaction flow

1. **Tap title / progress bar** → deep-link to `/problems/:id` full Tree page (or open a right-side drawer on desktop).
2. **Tap "＋ Add"** → modal with two radio buttons: *sub-problem* / *experiment*, single-field quick capture.
3. **Card auto-rotates** every X seconds (optional) through top-level problems, so the user sees what else is pending without leaving Character view.

---

#### 4. Data & API needs (only the *minimum* slice)

| Endpoint                            | Payload                                                  |                         |
| ----------------------------------- | -------------------------------------------------------- | ----------------------- |
| `GET /character/:id/problem-widget` | `{ problemId, title, openCount, totalCount, isBlocked }` |                         |
| `POST /problems/:id/quick-child`    | \`{ type: "problem"                                      | "experiment", title }\` |

The widget query can be a view that picks **either**:

* the most recently edited top-level problem, **or**
* the one with the highest `openCount`.

---

#### 5. Placement inside Character view

* Put it in the **"Today" / Control-Centre column** where you already show mood, tasks, and vitals.
* Keep it visually consistent (same card component, same border radius).
* Because the Character view is already a hub, the card acts as the "You have fires to put out" reminder without yanking the user into a separate flow.

---

#### 6. Why this works

* **At-a-glance clarity**—one coloured dot + fraction is enough to trigger user action.
* **Progressive disclosure**—deep work happens only after the user explicitly chooses to dive in.
* **Zero cognitive overload**—the card is just another metric in the dashboard, not a parallel app jammed into a tiny space.

---

Let me know if you want a quick Figma mock-up or the React snippet for the card component.


